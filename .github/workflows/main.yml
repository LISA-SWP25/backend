name: Adaptive CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  smart-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8
        
    - name: Analyze project structure
      id: analyze
      run: |
        echo "üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        TEST_FILES=$(find . -name "*test*.py" -type f | grep -v __pycache__ | head -20)
        
        if [ -z "$TEST_FILES" ]; then
          echo "tests_found=false" >> $GITHUB_OUTPUT
          echo "test_path=" >> $GITHUB_OUTPUT
        else
          echo "tests_found=true" >> $GITHUB_OUTPUT
          echo "üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:"
          echo "$TEST_FILES"
          
          # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É —Å —Ç–µ—Å—Ç–∞–º–∏
          if [ -d "tests" ] && [ "$(find tests -name "*.py" -type f | wc -l)" -gt 0 ]; then
            echo "test_path=tests/" >> $GITHUB_OUTPUT
            echo "üìç –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤: tests/"
          elif [ -f "test_api.py" ]; then
            echo "test_path=test_api.py" >> $GITHUB_OUTPUT
            echo "üìç –¢–µ—Å—Ç –≤ –∫–æ—Ä–Ω–µ: test_api.py"
          else
            # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            FIRST_TEST=$(echo "$TEST_FILES" | head -1)
            echo "test_path=$FIRST_TEST" >> $GITHUB_OUTPUT
            echo "üìç –ü–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç: $FIRST_TEST"
          fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å main.py
        if [ -f "main.py" ]; then
          echo "main_exists=true" >> $GITHUB_OUTPUT
          echo "üìÑ –ù–∞–π–¥–µ–Ω main.py"
        else
          echo "main_exists=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  main.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
    - name: Check code formatting
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        if black --check --diff .; then
          echo "‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else
          echo "‚ùå –ö–æ–¥ –Ω—É–∂–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å"
          echo ""
          echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
          echo "  black ."
          echo "  git add ."
          echo "  git commit -m 'Format code with Black'"
          echo "  git push"
          exit 1
        fi
        
    - name: Run linting (warnings only)
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞..."
        flake8 . --count --statistics --exit-zero || true
        
    - name: Run tests
      if: steps.analyze.outputs.tests_found == 'true'
      run: |
        echo "üß™ –ó–∞–ø—É—Å–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
        echo "üìç –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º: ${{ steps.analyze.outputs.test_path }}"
        pytest ${{ steps.analyze.outputs.test_path }} -v
        
    - name: No tests warning
      if: steps.analyze.outputs.tests_found == 'false'
      run: |
        echo "‚ö†Ô∏è  –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
        echo ""
        echo "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:"
        echo "  mkdir tests"
        echo "  # –°–æ–∑–¥–∞—Ç—å tests/test_api.py —Å –≤–∞—à–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏"
        echo "  # –ò–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å test_api.py –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞"
        echo ""
        echo "üîç –ü–æ–∏—Å–∫ Python —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ:"
        find . -name "*.py" -type f | grep -v __pycache__ | head -10
        
    - name: Test main.py import
      if: steps.analyze.outputs.main_exists == 'true'
      run: |
        echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ main.py..."
        python -c "
        try:
            import main
            print('‚úÖ main.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ')
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ main.py: {e}')
            exit(1)
        "
        
    - name: Success summary
      run: |
        echo "üéâ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
        echo ""
        echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
        echo "  üìÑ main.py: ${{ steps.analyze.outputs.main_exists == 'true' && '‚úÖ' || '‚ùå' }}"
        echo "  üß™ –¢–µ—Å—Ç—ã: ${{ steps.analyze.outputs.tests_found == 'true' && '‚úÖ' || '‚ö†Ô∏è' }}"
        echo "  üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ"
        echo ""
        if [ "${{ steps.analyze.outputs.tests_found }}" == "false" ]; then
          echo "üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã"
        else
          echo "üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
        fi
