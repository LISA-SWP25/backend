name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.10'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Код качество и тесты
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 bandit safety
        
    - name: Code formatting check (Black)
      run: black --check --diff .
      
    - name: Linting (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Security check (Bandit)
      run: bandit -r . -x ./tests/
      
    - name: Dependency security check
      run: safety check
      
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Сборка Docker образа
  build:
    needs: quality-check
    runs-on: ubuntu-latest
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image-uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Деплой на staging (для develop ветки)
  deploy-staging:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image-uri }}"
        # Здесь добавьте команды для деплоя на staging
        # Например, обновление Kubernetes deployment или Docker Compose
        
  # Деплой на production (для main ветки)
  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ needs.build.outputs.image-uri }}"
        # Здесь добавьте команды для деплоя на production

  # Деплой релизов
  deploy-release:
    if: github.event_name == 'release'
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Deploy release to production
      run: |
        echo "Deploying release ${{ github.event.release.tag_name }} to production..."
        echo "Image: ${{ needs.build.outputs.image-uri }}"

  # Уведомления о статусе
  notify:
    if: always()
    needs: [quality-check, build, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify on success
      if: ${{ needs.quality-check.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ Pipeline completed successfully!"
        # Добавьте интеграцию с Slack/Discord/Teams при необходимости
        
    - name: Notify on failure
      if: ${{ needs.quality-check.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        # Добавьте уведомления об ошибках
