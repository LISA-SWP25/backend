name: CI Backend 

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: '3.10'

jobs:
  # –ú—è–≥–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
  gentle-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8
        
    # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    - name: Auto-format code with Black
      run: |
        echo "üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
        black .
        
    - name: Check if formatting changes were made
      id: format-check
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üìù –ö–æ–¥ –±—ã–ª –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚úÖ –ö–æ–¥ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        fi
        
    # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è push, –Ω–µ –¥–ª—è PR)
    - name: Commit formatting changes
      if: steps.format-check.outputs.changes == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "ü§ñ Auto-format code with Black [skip ci]" || exit 0
        git push
        
    # –ú—è–≥–∫–∏–π –ª–∏–Ω—Ç–∏–Ω–≥ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–µ –æ—à–∏–±–∫–∏)
    - name: Code quality check (warnings only)
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."
        echo "=== Flake8 –ø—Ä–æ–≤–µ—Ä–∫–∏ ==="
        flake8 . --count --statistics --exit-zero || true
        echo ""
        echo "=== –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –≤—ã—à–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å ==="
        
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    - name: Run basic tests
      run: |
        echo "üß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
        pytest tests/test_api.py -v || {
          echo "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
          echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ: make test"
          exit 1
        }
        
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ)
    - name: Run extended tests (non-blocking)
      run: |
        echo "üß™ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
        if [ -f "tests/test_api_extended.py" ]; then
          pytest tests/test_api_extended.py -v --tb=short || {
            echo "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
          }
        else
          echo "‚ÑπÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
    - name: Success message
      run: |
        echo "üéâ –ú—è–≥–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
        echo ""
        echo "üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:"
        echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã—à–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)"
        echo "2. –î–ª—è –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make quality"
        echo "3. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–æ–≥–∏–π CI/CD"

  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ Docker (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
  build-if-changed:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[build]') || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if Dockerfile exists
      id: dockerfile-check
      run: |
        if [ -f "Dockerfile" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Build Docker image (test only)
      if: steps.dockerfile-check.outputs.exists == 'true'
      run: |
        echo "üê≥ –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
        docker build -t lisa-backend-test . || {
          echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞"
          echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Dockerfile –∏ requirements.txt"
          exit 1
        }
        echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ!"
        
    - name: Docker not found
      if: steps.dockerfile-check.outputs.exists == 'false'
      run: |
        echo "‚ÑπÔ∏è Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É"
